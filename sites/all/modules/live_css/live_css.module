<?php

/**
 * Implements hook_menu().
 */
function live_css_menu() {
  $items = array();

  $items['css/save'] = array(
    'page callback' => 'live_css_save', 
    'access arguments' => array('edit live css'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/development/live_css'] = array(
    'title' => t('Live CSS'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('live_css_admin'),
    'description' => t('Configure the live CSS editor.'),
    'access arguments' => array('access administration pages', 'edit live css'),
    'type' => MENU_NORMAL_ITEM
  );
  
  return $items;
}

/**
 * Implements hook_permission().
 */
function live_css_permission() {
  return array(
    'edit css' => array(
      'title' => t('Edit and save CSS'),
      'description' => t('Edit and save CSS with the live editor.'),
    )
  );
}

/**
* #pre_render callback that alters the LESS files prior to rendering.
*/
function live_css_pre_render($styles) {
  foreach ($styles['#items'] as $key => $info) {
    $input_file = $info['data'];
    if (drupal_substr($input_file, -5) == '.less') {
      $styles['#items'][$key]['type'] = 'external';
    }
  }
  return $styles;
}
/**
 * Implements hook_element_info_alter().
 */
function live_css_element_info_alter(&$type) {
  array_unshift($type['styles']['#pre_render'], 'live_css_pre_render');
}

/**
 * Implements hook_settings().
 */
function live_css_admin(){
  $form = array();
  
  $form['live_css_less'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable LESS Support'),
    '#default_value' => variable_get('live_css_less', 1),
    '#description' => t('Allows the live editing and display of LESS files on the site, by simply embedding stylesheets with a "less" extension instead of "css". The Less is parsed on each page load, even for anonymous users. In production you may wish to disable this feature and use the LESS module instead.')
  );
  $form['live_css_hideadmin'] = array(
    '#type' => 'checkbox',
    '#title' => t('Hide Admin Menu'),
    '#default_value' => variable_get('live_css_hideadmin', 1),
    '#description' => t('Automatically hides the administration menu when editing CSS.')
  );
  $form['live_css_hidemodules'] = array(
    '#type' => 'checkbox',
    '#title' => t('Only show theme CSS'),
    '#default_value' => variable_get('live_css_hidemodules', 0),
    '#description' => t('Removes module and other styles from the CSS list.')
  );
  $form['live_css_storage'] = array(
    '#type' => 'checkbox',
    '#title' => t('Consistent Editor State'),
    '#default_value' => variable_get('live_css_storage', 1),
    '#description' => t('Remembers the current file, file position and whether the Live CSS tab is open to maintain this between page loads.')
  );
  $form['live_css_theme'] = array(
    '#type' => 'select',
    '#title' => t('Editor Theme'),
    '#default_value' => variable_get('live_css_theme', 'twilight'),
    '#options' => live_css_list_themes()
  );
  $form['live_css_fontsize'] = array(
    '#type' => 'select',
    '#title' => t('Font Size'),
    '#default_value' => variable_get('live_css_fontsize', '12px'),
    '#options' => array(
      '8px' => '8px',
      '10px' => '10px',
      '11px' => '11px',
      '12px' => '12px',
      '14px' => '14px',
      '16px' => '16px',
      '18px' => '18px',
    )
  );
  $form['live_css_tabsize'] = array(
    '#type' => 'select',
    '#title' => t('Tab Size'),
    '#default_value' => variable_get('live_css_tabsize', 2),
    '#options' => array(
      1 => '1',
      2 => '2',
      3 => '3',
      4 => '4',
    )
  );
  $form['live_css_softtabs'] = array(
    '#type' => 'checkbox',
    '#title' => t('Soft Tabs'),
    '#default_value' => variable_get('live_css_softtabs', 1),
    '#description' => t('Use spaces instead of a tab character.')
  );
  
  return system_settings_form($form);
}

/**
 * Lists all the live editor's themes available.
 */
function live_css_list_themes() {
  $result = array();
  $files = live_css_list_files(dirname(__FILE__) . '/ace/src');
  foreach ($files as $file) {
    if (drupal_substr($file, 0, 5) == 'theme' && drupal_substr($file, -15) != 'uncompressed.js' && drupal_substr($file, -13) != 'noconflict.js'){
      $theme = drupal_substr($file, 6, drupal_strlen($file) - 9);
      $name = ucwords(str_replace('_', ' ', $theme));
      $result[$theme] = $name;
    }    
  }
  return $result;
}

/**
 * Get the directory listing for the theme files of ace.
 */
function live_css_list_files($folder){
  $results = array();
  
  $handler = opendir($folder);
  while ($file = readdir($handler)) {
    if ($file != '.' && $file != '..')
      $results[] = $file;
  }
  closedir($handler);
  return $results;
}


/**
 * Implements hook_init().
 */
function live_css_init() {
  
  $less = variable_get('live_css_less', 1);
  
  // Add necessary javascript files to handle LESS files editing.
  if ($less) {
    drupal_add_js(drupal_get_path('module', 'live_css') . '/less-display.js');
    drupal_add_js(drupal_get_path('module', 'live_css') . '/less-1.3.0.min.js');
  }
  
  // Check that a user has the permission to edit the files in order to set the
  // settings and add required javascript libraries.
  if (user_access('edit css')) {
    
    // Set settings
    $theme = variable_get('live_css_theme', 'twilight');
    $settings = array();
    $settings['theme'] = $theme;
    $settings['autoload'] = FALSE;
    $settings['hideadmin'] = variable_get('live_css_hideadmin', 1);
    $settings['hidemodules'] = variable_get('live_css_hidemodules', 0);
    $settings['fontsize'] = variable_get('live_css_fontsize', '12px');
    $settings['tabsize'] = (int)variable_get('live_css_tabsize', 2);
    $settings['softtabs'] = (boolean)variable_get('live_css_softtabs', 1);
    $settings['storage'] = variable_get('live_css_storage', 1);
    $settings['less'] = $less;
    $settings['savepath'] = url('css/save');

    drupal_add_js(array('live_css' => $settings), 'setting');
    
    drupal_add_js(drupal_get_path('module', 'live_css') . '/ace/src/ace.js');
    drupal_add_js(drupal_get_path('module', 'live_css') . '/ace/src/mode-css.js');
    drupal_add_js(drupal_get_path('module', 'live_css') . '/ace/src/theme-' . $theme . '.js');
    
    drupal_add_js(drupal_get_path('module', 'live_css') . '/plugins.js');
    
    // Load the list of stylesheets
    drupal_add_css(drupal_get_path('module', 'live_css') . '/css.css', 'module', 'all', FALSE);
    drupal_add_js(drupal_get_path('module', 'live_css') . '/css.js');
  }
}

/**
 * Callback to save a file edited live.
 */
function live_css_save() {
  $css = $_POST['css'];
  $href = $_POST['href'];
  
  //calculate the file path relative to the base drupal folder
  $parts = explode('/', $href);
  $path = '';
  for ($i = 3; $i < count($parts); $i++) {
    $path .= $parts[$i] . '/';
  }
  if (strpos($path, '?') > 0) {
   $path = drupal_substr($path, 0, strpos($path, '?'));
  }
  else {
    $path = drupal_substr($path, 0, -1); 
  }

  $path = $_SERVER['DOCUMENT_ROOT'] . '/' . $path;  
 
  //save file back
  $msg = '';
  $fh = fopen($path, 'w');
  if ($fh !== FALSE) {
    fwrite($fh, $css);
    fclose($fh);
    $result = 'success';
  }
  else {
    $result = 'failure';
    $msg = 'Can\'t open file ' . $path . ' from ' . $href . '. Ensure that you have full write access and that the path is correct.';
  }
  
  echo drupal_json_encode(array(
    'result' => $result,
    'filename' => $path,
    'msg' => $msg
  ));
}
